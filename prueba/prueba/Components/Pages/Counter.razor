@page "/login"
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <h3>Login</h3>
    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private void HandleLogin()
    {
        // Aquí se debe manejar la lógica de autenticación
        // Este es solo un ejemplo básico. En la práctica, llamarías a un servicio que valide las credenciales.

        if (loginModel.Username == "admin" && loginModel.Password == "password")
        {
            // Autenticación exitosa. Redirige o maneja el inicio de sesión aquí.
            errorMessage = null; // Elimina cualquier mensaje de error previo
                                 // Redirigir o realizar acciones posteriores al inicio de sesión exitoso
        }
        else
        {
            // Autenticación fallida
            errorMessage = "Invalid username or password";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
